[gd_scene load_steps=5 format=2]

[ext_resource path="res://shootbutton.png" type="Texture" id=1]

[sub_resource type="StyleBoxEmpty" id=1]

content_margin_left = -1.0
content_margin_right = -1.0
content_margin_top = -1.0
content_margin_bottom = -1.0

[sub_resource type="GDScript" id=2]

script/source = "
extends Panel

var controller_active = false
var joystick_touch_index = -1
var joystick_origin = Vector2(0.0, 0.0)
var joystick_delta = Vector2(0.0, 0.0)
var shoot_touch_index = -1
var ui_color = Color(1.0, 1.0, 1.0, 1.0)
var ui_color_pressed = Color(1.0, 1.0, 1.0, 1.0)
var joystick_threshold = 120

func _ready():
	get_node(\"Cursor\").hide()
	set_process_input(true)


func set_sensitivity(sensitivity):
	joystick_threshold = 150 - sensitivity * 120
	get_node(\"Cursor\").set_threshold(joystick_threshold)


func set_active(active):
	controller_active = active
	if(!controller_active):
		joystick_touch_index = -1
		shoot_touch_index = -1
		joystick_delta = Vector2(0.0, 0.0)


func set_color(color, color_pressed):
	ui_color = color
	ui_color_pressed = color_pressed
	get_node(\"Cursor\").set_color(ui_color, ui_color_pressed)
	get_node(\"ShootButton\").set_modulate(ui_color)


func _input(event):
	if(!controller_active):
		return
	
	if(event is InputEventScreenTouch):
		event = make_input_local(event)
		if(event.pressed and event.position.y > 0):
			if(event.position.x < 720):
				joystick_origin = event.position
				joystick_touch_index = event.index
				get_node(\"Cursor\").set_position(joystick_origin)
				get_node(\"Cursor\").show()
			else:
				shoot_touch_index = event.index
				get_node(\"ShootButton\").set_modulate(ui_color_pressed)
		else:
			if(event.index == joystick_touch_index):
				joystick_touch_index = -1
				joystick_delta = Vector2(0.0, 0.0)
				get_node(\"Cursor\").set_delta(Vector2(0.0, 0.0))
				get_node(\"Cursor\").hide()
			elif(event.index == shoot_touch_index):
				shoot_touch_index = -1
				get_node(\"ShootButton\").set_modulate(ui_color)
	elif(event is InputEventScreenDrag):
		event = make_input_local(event)
		if(event.index == joystick_touch_index):
			joystick_delta = event.position - joystick_origin
			
			# Joystick deflected beyond 120% of range, move origin
			var distance = joystick_delta.length()
			var overshoot = distance - joystick_threshold * 1.2
			if(overshoot > 0.0):
				joystick_origin += joystick_delta * overshoot / distance;
				joystick_delta -= joystick_delta * overshoot / distance;
			
			get_node(\"Cursor\").set_position(joystick_origin)
			get_node(\"Cursor\").set_delta(joystick_delta)
		
		
func get_buttons():
	var buttons = 0
	if(shoot_touch_index >= 0):
		buttons |= 0x08
		
	return buttons
	
	
func get_move_dir():
	var v = joystick_delta / joystick_threshold
	if(v.length() > 1.0):
		v.y = -v.y
		return v.normalized()
	else:
		return Vector2(0.0, 0.0)


func get_aim_dir():
	var v = joystick_delta / joystick_threshold
	if(v.length() > 0.2):
		v.y = -v.y
		return v.normalized()
	else:
		return Vector2(0.0, 0.0)

"

[sub_resource type="GDScript" id=3]

script/source = "
extends Node2D

var cursor_color = Color(1.0, 1.0, 1.0, 1.0)
var cursor_color_pressed = Color(1.0, 1.0, 1.0, 1.0)
var cursor_radius = 60
var cursor_threshold = 50
var cursor_delta = Vector2(0.0, 0.0)


func _ready():
	pass


func set_color(color, color_pressed):
	cursor_color = color
	cursor_color_pressed = color_pressed
	update()


func set_threshold(threshold):
	cursor_threshold = threshold
	update()


func set_delta(delta):
	cursor_delta = delta
	update()


func _draw():
	var dist = cursor_delta.length() / cursor_threshold
	var dir = cursor_delta.normalized()

	var line_width = 4
	var line_color = cursor_color;
	if(dist > 0.2):
		line_color = cursor_color_pressed;
	
	draw_circle_outline(cursor_radius + cursor_threshold * 0.2, 48, line_color, line_width)
	draw_circle_outline(cursor_radius + cursor_threshold, 48, line_color, line_width)
	
	draw_circle(cursor_delta, cursor_radius, line_color)


func draw_circle_outline(radius, segments, color, width):
	
	var points = PoolVector2Array()
	
	var previous_position = Vector2(radius, 0.0)
	for i in range(0, segments):
		var angle = 360 * (i + 1) / segments
		var position = Vector2(cos(deg2rad(angle)) * radius, sin(deg2rad(angle)) * radius)
		points.append(previous_position)
		points.append(position)
		previous_position = position
	
	draw_polyline(points, color, width, true)

	"

[node name="Panel" type="Panel" index="0"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 160.0
margin_right = 1024.0
margin_bottom = 600.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 0
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 1
custom_styles/panel = SubResource( 1 )
script = SubResource( 2 )
_sections_unfolded = [ "Material", "Visibility", "custom_styles" ]

[node name="ShootButton" type="Sprite" parent="." index="0"]

position = Vector2( 928, 256 )
texture = ExtResource( 1 )
_sections_unfolded = [ "Material", "Transform", "Z Index" ]

[node name="Cursor" type="Node2D" parent="." index="1"]

position = Vector2( 252, 242 )
script = SubResource( 3 )


