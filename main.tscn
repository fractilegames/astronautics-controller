[gd_scene load_steps=15 format=2]

[ext_resource path="res://controller.theme" type="Theme" id=1]
[ext_resource path="res://font.font" type="BitmapFont" id=2]
[ext_resource path="res://status_bar.tscn" type="PackedScene" id=3]
[ext_resource path="res://integrity.png" type="Texture" id=4]
[ext_resource path="res://temperature.png" type="Texture" id=5]
[ext_resource path="res://logo.png" type="Texture" id=6]
[ext_resource path="res://missilelock.wav" type="AudioStream" id=7]
[ext_resource path="res://respawn.wav" type="AudioStream" id=8]
[ext_resource path="res://disruption.png" type="Texture" id=9]
[ext_resource path="res://flash.png" type="Texture" id=10]

[sub_resource type="GDScript" id=1]
script/source = "
extends Panel

const port = 26004

var config = ConfigFile.new()
var button_controller
var joystick_controller
var udp
var data = PoolByteArray()
var sequence = 0
var timer = 0.0
var connected_address = \"\"
var connection_active = false
var connection_timer
var configure_timer
var config_sequence_number = 1
var player_hue = 0
var background_style
var flash_intensity = 0.0
var disruption_intensity = 0.0
var disruption_timer = 0.0
var event_trigger = -1
var integrity = -1
var temperature = -1
var status_flags = 0


const EVENT_DAMAGE = 1
const EVENT_RESPAWN = 0xfe
const EVENT_DESTRUCTION = 0xff

const STATUS_FLAG_RESPAWN_REQUEST = 0x01
const STATUS_FLAG_DISRUPTED = 0x02
const STATUS_FLAG_TARGETED = 0x04


func _ready():
	
	background_style = StyleBoxTexture.new()
	background_style.set_texture(preload(\"res://background.png\"))
	add_stylebox_override(\"panel\", background_style)
	
	# Load configuration or set defaults
	if(config.load(\"user://settings.ini\") != OK):
		config.set_value(\"settings\", \"player_name\", \"Remote\")
		config.set_value(\"settings\", \"player_hue\", 0)
		config.set_value(\"settings\", \"controller\", 1)
		config.set_value(\"settings\", \"joystick_sensitivity\", 0.5)
		config.set_value(\"settings\", \"sound_effects\", true)
		config.set_value(\"settings\", \"flags\", 0)
		config.set_value(\"settings\", \"privacy_notice\", 0)
	
	# Preload controllers
	button_controller = preload(\"res://button_controller.tscn\").instance()
	button_controller.set_name(\"Controller\")
	button_controller.set_position(Vector2(0, 160))
	joystick_controller = preload(\"res://joystick_controller.tscn\").instance()
	joystick_controller.set_name(\"Controller\")
	joystick_controller.set_position(Vector2(0, 160))
	joystick_controller.set_sensitivity(config.get_value(\"settings\", \"joystick_sensitivity\", 0.5))

	# Set intitial controller type
	set_controller_type(config.get_value(\"settings\", \"controller\", 0))
	get_node(\"Controller\").set_active(true)

	# Set up connections
	get_node(\"SettingsButton\").connect(\"pressed\", self, \"_on_settings_button_pressed\")
	get_node(\"ConnectButton\").connect(\"pressed\", self, \"_on_connect_button_pressed\")
	get_node(\"AboutButton\").connect(\"pressed\", self, \"_on_about_button_pressed\")
	get_node(\"ConnectPopup/ConnectButton\").connect(\"pressed\", self, \"_on_connect_panel_connect_button_pressed\")
	get_node(\"ConnectPopup/CancelButton\").connect(\"pressed\", self, \"_on_connect_panel_cancel_button_pressed\")
	get_node(\"ConnectPopup/GameList\").connect(\"item_selected\", self, \"_on_connect_panel_game_list_item_selected\")
	get_node(\"ManualConnectPopup/ConnectButton\").connect(\"pressed\", self, \"_on_manual_connect_panel_connect_button_pressed\")
	get_node(\"ManualConnectPopup/CancelButton\").connect(\"pressed\", self, \"_on_manual_connect_panel_cancel_button_pressed\")
	get_node(\"SettingsPopup/OKButton\").connect(\"pressed\", self, \"_on_settings_panel_ok_button_pressed\")
	get_node(\"SettingsPopup/GridContainer/PlayerColorScrollBar\").connect(\"value_changed\", self, \"_on_settings_panel_hue_changed\")
	get_node(\"SettingsPopup/GridContainer/SoundEffectsButton\").connect(\"pressed\", self, \"_on_settings_panel_sound_button_pressed\")
	get_node(\"AboutPopup/OKButton\").connect(\"pressed\", self, \"_on_about_panel_ok_button_pressed\")
	get_node(\"AboutPopup/LinkButton\").connect(\"pressed\", self, \"_on_about_panel_link_button_pressed\")
	get_node(\"PrivacyPopup/AcceptButton\").connect(\"pressed\", self, \"_on_privacy_panel_accept_button_pressed\")
	get_node(\"PrivacyPopup/RejectButton\").connect(\"pressed\", self, \"_on_privacy_panel_reject_button_pressed\")

	# Set up default status
	get_node(\"IntegrityBar\").set_value(1.0)
	get_node(\"TemperatureBar\").set_value(0.0)
	
	# Set up listening UDP socket
	udp = PacketPeerUDP.new();
	var err = udp.listen(0)
	if (err != OK):
		get_node(\"StatusLabel\").set_text(\"Unable to open UDP port: \" + str(err))
	
	# Set up connection timeout timer
	connection_timer = Timer.new()
	add_child(connection_timer)
	connection_timer.set_wait_time(2.0)
	connection_timer.set_one_shot(true)
	connection_timer.connect(\"timeout\", self, \"_on_connection_timeout\")
	
	# Set up configure message inhibit timer
	configure_timer = Timer.new()
	add_child(configure_timer)
	configure_timer.set_wait_time(1.0)
	configure_timer.set_one_shot(true)
	
	# Create empty control data message
	data.push_back(0x41)	# Header (\"ACTL\")
	data.push_back(0x43)
	data.push_back(0x54)
	data.push_back(0x4C)
	data.push_back(1)		# Version
	data.push_back(0)		# Sequence number
	data.push_back(0)
	data.push_back(0)		# Ack
	data.push_back(0)	
	data.push_back(1)		# Message type: control
	data.push_back(0)		# Digital inputs
	data.push_back(0)		# Left stick
	data.push_back(0)
	data.push_back(0)		# Right stick
	data.push_back(0)
	
	set_player_hue(config.get_value(\"settings\", \"player_hue\", 0.0))
	
	# Begin control loop
	set_process(true)


func _on_settings_panel_hue_changed(value):
	set_player_hue(value)


func _on_settings_panel_sound_button_pressed():
	if(get_node(\"SettingsPopup/GridContainer/SoundEffectsButton\").is_pressed()):
		get_node(\"SettingsPopup/GridContainer/SoundEffectsButton\").set_text(\"On\")
	else:
		get_node(\"SettingsPopup/GridContainer/SoundEffectsButton\").set_text(\"Off\")


func _on_settings_button_pressed():
	get_node(\"SettingsPopup/GridContainer/PlayerNameLineEdit\").set_text(config.get_value(\"settings\", \"player_name\", \"Remote\"))
	get_node(\"SettingsPopup/GridContainer/PlayerColorScrollBar\").set_value(config.get_value(\"settings\", \"player_hue\", 0))
	var type_index = config.get_value(\"settings\", \"controller\", 0)
	if type_index == 1:
		get_node(\"SettingsPopup/GridContainer/ControllerTypeContainer/ControllerTypeButton2\").set_pressed(true)
	else:
		get_node(\"SettingsPopup/GridContainer/ControllerTypeContainer/ControllerTypeButton1\").set_pressed(true)
	get_node(\"SettingsPopup/GridContainer/SensitivityScrollBar\").set_value(config.get_value(\"settings\", \"joystick_sensitivity\", 0.5))
	get_node(\"SettingsPopup/GridContainer/SoundEffectsButton\").set_pressed(config.get_value(\"settings\", \"sound_effects\", true))
	
	# Fake button press to update button text
	_on_settings_panel_sound_button_pressed()
	
	get_node(\"Controller\").set_active(false)
	get_node(\"SettingsPopup\").popup()
	get_node(\"SettingsPopup/OKButton\").grab_focus()


func _on_settings_panel_ok_button_pressed():
	var name = get_node(\"SettingsPopup/GridContainer/PlayerNameLineEdit\").get_text()
	var hue = get_node(\"SettingsPopup/GridContainer/PlayerColorScrollBar\").get_value()
	var controller = 0
	if get_node(\"SettingsPopup/GridContainer/ControllerTypeContainer/ControllerTypeButton2\").is_pressed():
		controller = 1
	var sensitivity = get_node(\"SettingsPopup/GridContainer/SensitivityScrollBar\").get_value()
	var sounds = get_node(\"SettingsPopup/GridContainer/SoundEffectsButton\").is_pressed()

	config.set_value(\"settings\", \"controller\", controller)
	config.set_value(\"settings\", \"player_name\", name)
	config.set_value(\"settings\", \"player_hue\", hue)
	config.set_value(\"settings\", \"joystick_sensitivity\", sensitivity)
	config.set_value(\"settings\", \"sound_effects\", sounds)
		
	config.save(\"user://settings.ini\")
	
	# Apply new Settings
	set_player_hue(hue)
	set_controller_type(controller)
	joystick_controller.set_sensitivity(sensitivity)

	# Increment configuration sequence number to send an update
	if(connected_address != \"\"):
		config_sequence_number = config_sequence_number + 1
		if(config_sequence_number > 255):
			config_sequence_number = 1
		
	get_node(\"SettingsPopup\").hide()
	get_node(\"Controller\").set_active(true)


func _on_connect_button_pressed():
	
	# Show privacy notice pop-up if not yet accepted
	if(config.get_value(\"settings\", \"privacy_notice\", 0) == 0):
		get_node(\"Controller\").set_active(false)
		get_node(\"PrivacyPopup\").popup()
		return
	
	if(connected_address == \"\"):
		discover_games()
		get_node(\"Controller\").set_active(false)
		get_node(\"ConnectPopup\").popup()
	else:
		disconnect_from_game(\"\")


func _on_connect_panel_connect_button_pressed():
	# Get host address from first selected item in game list
	var list = get_node(\"ConnectPopup/GameList\")
	var index = -1
	for i in range(0, list.get_item_count()):
		if(list.is_selected(i)):
			index = i
			
	# Connect
	if(index >= 0):
		var host = list.get_item_metadata(index)
		if(host != \"0.0.0.0\"):
			connect_to_game(list.get_item_text(index), host)
		else:
			get_node(\"ManualConnectPopup/StatusLabel\").set_text(\"\")
			get_node(\"ManualConnectPopup\").popup()


func _on_connect_panel_cancel_button_pressed():
	get_node(\"ConnectPopup\").hide()
	get_node(\"Controller\").set_active(true)


func _on_connect_panel_game_list_item_selected(var index):
	# Enable connect button if a game is selected
	get_node(\"ConnectPopup/ConnectButton\").set_disabled(get_node(\"ConnectPopup/GameList\").get_selected_items().size() == 0)


func _on_manual_connect_panel_connect_button_pressed():
	# Get manually entered host address
	var address = get_node(\"ManualConnectPopup/AddressLineEdit\").get_text()
	
	# Check that entered text is a valid IPv4 address
	var values = address.split(\".\", false)
	if values.size() != 4:
		get_node(\"ManualConnectPopup/StatusLabel\").set_text(\"Invalid address!\")
		return
	for i in range(0, 4):
		var conv = values[i].to_int()
		if conv < 0 and conv > 255:
			get_node(\"ManualConnectPopup/StatusLabel\").set_text(\"Invalid address!\")
			return
	
	# Connect
	connect_to_game(address, address)


func _on_manual_connect_panel_cancel_button_pressed():
	get_node(\"ManualConnectPopup\").hide()


func _on_connection_timeout():
	disconnect_from_game(\"Timeout\")


func _on_about_button_pressed():
	get_node(\"Controller\").set_active(false)
	get_node(\"AboutPopup\").popup()


func _on_about_panel_ok_button_pressed():
	get_node(\"AboutPopup\").hide()
	get_node(\"Controller\").set_active(true)

func _on_about_panel_link_button_pressed():
	OS.shell_open(\"http://www.fractilegames.com/astronautics/\")


func _on_privacy_panel_accept_button_pressed():
	config.set_value(\"settings\", \"privacy_notice\", 1)
	config.save(\"user://settings.ini\")
	
	get_node(\"PrivacyPopup\").hide()
	get_node(\"Controller\").set_active(true)
	
	_on_connect_button_pressed()


func _on_privacy_panel_reject_button_pressed():
	get_node(\"PrivacyPopup\").hide()
	get_node(\"Controller\").set_active(true)


func _process(delta):

	while(udp.get_available_packet_count() > 0):
		var packet = udp.get_packet()
		var host = udp.get_packet_ip()
		var port = udp.get_packet_port()
		
		# Check received message header
		if(packet.size() >= 10 and packet[0] == 0x41 and packet[1] == 0x43 and packet[2] == 0x54 and packet[3] == 0x4C):
			# Check message type
			if(packet[9] == 101):
				# Game announce message
				handle_announce_message(packet, host, port)
			elif(packet[9] == 2):
				# Status message
				handle_status_message(packet, host, port)

	if(connected_address != \"\"):
		var controller = get_node(\"Controller\")
		
		# Use lower send interval while connection is \"not active\" to prevent unnecessarily spamming
		# the server in case the connection has been rejected (e.g. too many clients)
		var interval = 0.5
		if connection_active:
			interval = 0.05
		
		# Send control data to server
		timer += delta;
		if(timer > interval):
			
			if(sequence >= 65535):
				sequence = 1
			else:
				sequence = sequence + 1
			data.set(5, sequence & 0xFF)
			data.set(6, sequence >> 8)
			
			if(controller != null):
				data.set(10, controller.get_buttons())
				data.set(11, axis_to_byte(controller.get_aim_dir().x))
				data.set(12, axis_to_byte(controller.get_aim_dir().y))
				data.set(13, axis_to_byte(controller.get_move_dir().x))
				data.set(14, axis_to_byte(controller.get_move_dir().y))
			else:
				data.set(10, 0)
						
			udp.put_packet(data)
			
			timer -= interval
	
	update_effects(delta)


func connect_to_game(title, host):
		# Store host address and set socket send address
		connected_address = host
		connection_active = false
		udp.set_dest_address(connected_address, port)
		
		# Set initial configure message
		send_configure_message()
		
		# Start connection timeout timer
		connection_timer.start();
		
		# Update UI
		get_node(\"StatusLabel\").set_text(title)
		get_node(\"ConnectButton\").set_text(\"Disconnect\")
		get_node(\"ConnectPopup\").hide()
		get_node(\"ManualConnectPopup\").hide()
		get_node(\"Controller\").set_active(true)


func disconnect_from_game(reason):
	# Transmit \"leave\" message to host
	send_leave_message()

	# Stop connection timeout timer
	connection_timer.stop();
	
	# Clear stored host address
	connected_address = \"\"
	connection_active = false
	
	# Clear stored status data
	temperature = -1
	integrity = -1
	status_flags = 0
	
	# Update UI
	if(reason == \"\"):
		reason = \"Unconnected\"
	else:
		reason = \"Disconnected (\" + reason + \")\";
	get_node(\"ConnectButton\").set_text(\"Connect\")
	get_node(\"StatusLabel\").set_text(reason)
	get_node(\"IntegrityBar\").set_value(0)
	get_node(\"TemperatureBar\").set_value(0)


func set_controller_type(type):
	
	# Remove old controller node
	var controller = get_node(\"Controller\")
	if(controller != null):
		remove_child(controller)

	# Add new controller node
	if(type == 1):
		add_child(joystick_controller)
	else:
		add_child(button_controller)


func set_player_hue(hue):
	
	var color = Color(1.0, 1.0, 1.0, 1.0)
	color.s = 1.0
	color.v = 1.0
	color.h = hue / 255
	var color_pressed = Color(1.0, 1.0, 1.0, 1.0)
	color_pressed.s = 1.0
	color_pressed.v = 0.7
	color_pressed.h = hue / 255
	var color_disabled = Color(1.0, 1.0, 1.0, 1.0)
	color_disabled.s = 1.0
	color_disabled.v = 0.5
	color_disabled.h = hue / 255

	var theme = get_theme().duplicate();
	
	theme.set_color(\"font_color\", \"Button\", color)
	theme.set_color(\"font_color_pressed\", \"Button\", color_pressed)
	theme.set_color(\"font_color_hover\", \"Button\", color)
	theme.set_color(\"font_color_disabled\", \"Button\", color_disabled)

	theme.set_color(\"font_color\", \"OptionButton\", color)
	theme.set_color(\"font_color_pressed\", \"OptionButton\", color)
	theme.set_color(\"font_color_selected\", \"OptionButton\", color_pressed)
	
	theme.set_color(\"font_color\", \"PopupMenu\", color)
	theme.set_color(\"font_color_hover\", \"PopupMenu\", color)

	theme.set_color(\"font_color\", \"Label\", color)
	theme.set_color(\"default_color\", \"RichTextLabel\", color)
	
	theme.set_color(\"font_color\", \"LineEdit\", color)
	theme.set_color(\"cursor_color\", \"LineEdit\", color)
	theme.set_color(\"selection_color\", \"LineEdit\", color_pressed)
	
	theme.set_color(\"font_color\", \"ItemList\", color)
	theme.set_color(\"font_color_selected\", \"ItemList\", color_pressed)

	get_node(\"IntegrityIcon\").set_modulate(color);
	get_node(\"IntegrityBar\").set_color(color);
	get_node(\"TemperatureIcon\").set_modulate(color);
	get_node(\"TemperatureBar\").set_color(color);	
	get_node(\"AboutPopup/LogoTextureFrame\").set_modulate(color);

	joystick_controller.set_color(color, color_pressed)
	button_controller.set_color(color, color_pressed)
	
	player_hue = hue

	set_theme(theme)


func update_effects(delta):
	
	# Fade out damage effect
	if(flash_intensity > 0.0):
		flash_intensity -= delta * 2.0
		if(flash_intensity < 0.0):
			flash_intensity = 0.0
	
	# Update damage overlay
	var overlay = get_node(\"DamageOverlay\")
	if(flash_intensity > 0.0):
		var off_color = Color(\"#000\")
		var flash_color = Color(1.0, 1.0, 1.0, 1.0)
		flash_color.s = 1.0
		flash_color.v = 0.5
		flash_color.h = player_hue / 255
		overlay.set_modulate(off_color.linear_interpolate(flash_color, clamp(flash_intensity, 0.0, 1.0)))
		overlay.set_visible(true)
	else:
		overlay.set_visible(false)
	
	# Fade out disruption effect
	if(status_flags & STATUS_FLAG_DISRUPTED or Input.is_key_pressed(KEY_D)):
		disruption_intensity = 1.0
	elif(disruption_intensity > 0.0):
		disruption_intensity -= delta * 1.0
		if(disruption_intensity < 0.0):
			disruption_intensity = 0.0
	
	# Update disruption overlay
	overlay = get_node(\"DisruptionOverlay\")
	if(disruption_intensity > 0.0):
		var value = disruption_intensity * disruption_intensity
		overlay.set_modulate(Color(value, value, value, 1.0))
		disruption_timer -= delta
		if(disruption_timer <= 0.0):
			overlay.set_region_rect(Rect2(0, 600 * randf(), 64, 600))
			disruption_timer = randf() * 0.15
		overlay.set_visible(true)
		
	else:
		overlay.set_visible(false)
	
	# Update target lock sound loop
	if(status_flags & STATUS_FLAG_TARGETED):
		if(not get_node(\"TargetedSound\").is_playing() and config.get_value(\"settings\", \"sound_effects\", true)):
			get_node(\"TargetedSound\").play()
	else:
		if(get_node(\"TargetedSound\").is_playing()):
			get_node(\"TargetedSound\").stop()
			
	get_node(\"RespawnHintLabel\").set_visible(status_flags & STATUS_FLAG_RESPAWN_REQUEST)


func axis_to_byte(val):
	var byte = 0
	if(val > 0.0):
		byte = int(val * 127);
	elif(val < 0.0):
		byte = 255 + int(val * 127)
	return byte
	
	
func discover_games():
	
	# Clear previous games from list
	var list = get_node(\"ConnectPopup/GameList\")
	list.clear()
	list.add_item(\"<Manual connect>\")
	list.set_item_metadata(0, \"0.0.0.0\")
	
	get_node(\"ConnectPopup/ConnectButton\").set_disabled(true)
	
	# Construct a discover message
	var msg = PoolByteArray()
	msg.push_back(0x41)		# Header (\"ACTL\")
	msg.push_back(0x43)
	msg.push_back(0x54)
	msg.push_back(0x4C)
	msg.push_back(1)		# Version
	msg.push_back(0)		# Sequence number
	msg.push_back(0)
	msg.push_back(0)		# Ack
	msg.push_back(0)	
	msg.push_back(100)		# Message type: discover
	
	# Send the message to multicast address
	var err = udp.set_dest_address(\"224.0.0.1\", port)
	if(err == OK):
		err = udp.put_packet(msg)
		if(err == OK):
			get_node(\"ConnectPopup/StatusLabel\").set_text(\"Searching for games..\")

	if(err != OK):
		get_node(\"ConnectPopup/StatusLabel\").set_text(\"Network error \" + str(err))

	udp.set_dest_address(connected_address, port)

	
func send_configure_message():
	
	var name = config.get_value(\"settings\", \"player_name\", \"Remote\").to_utf8()
	var hue = config.get_value(\"settings\", \"player_hue\", 0)
	
	# Construct a configure message
	var msg = PoolByteArray()
	msg.push_back(0x41)		# Header (\"ACTL\")
	msg.push_back(0x43)
	msg.push_back(0x54)
	msg.push_back(0x4C)
	msg.push_back(1)		# Version
	msg.push_back(0)		# Sequence number
	msg.push_back(0)
	msg.push_back(0)		# Ack
	msg.push_back(0)	
	msg.push_back(3)		# Message type: configure
	msg.push_back(config_sequence_number)
	msg.push_back(name.size())
	for i in range(0, name.size()):
		msg.push_back(name[i])
	msg.push_back(hue)
	msg.push_back(config.get_value(\"settings\", \"flags\", 0))
	
	udp.put_packet(msg)


func send_leave_message():
	# Construct a leave message
	var msg = PoolByteArray()
	msg.push_back(0x41)		# Header (\"ACTL\")
	msg.push_back(0x43)
	msg.push_back(0x54)
	msg.push_back(0x4C)
	msg.push_back(1)		# Version
	msg.push_back(0)		# Sequence number
	msg.push_back(0)
	msg.push_back(0)		# Ack
	msg.push_back(0)	
	msg.push_back(4)		# Message type: leave
	
	udp.put_packet(msg)


func handle_announce_message(packet, host, port):
	
	# Check minimum valid message size
	if(packet.size() < 11):
		return
	
	# Decode game name	
	var namedata = PoolByteArray()
	var namelength = packet[10]
	if(packet.size() < 11 + namelength):
		return # Too short message
	for i in range(0, namelength):
		namedata.push_back(packet[11 + i])
	namedata.push_back(0)
	var name = namedata.get_string_from_utf8()
	
	# Check if host is already in the list
	var list = get_node(\"ConnectPopup/GameList\")
	var index = -1
	for i in range(0, list.get_item_count()):
		if(host == list.get_item_metadata(i)):
			index = i
			break
		
	# Add or update list content
	var title = name + \" (\" + host + \")\"
	if(index >= 0):
		list.set_item_text(index, title)
	else:
		index = list.get_item_count()
		list.add_item(title)
		list.set_item_metadata(index, host)
	
	# Auto-select first game if none is selected
	if list.get_selected_items().size() == 0:
		list.select(index)
		get_node(\"ConnectPopup/ConnectButton\").set_disabled(false)
	
	# Clear \"searching games..\" status
	get_node(\"ConnectPopup/StatusLabel\").set_text(\"\")


func handle_status_message(packet, host, port):

	# Check sender address
	if(host != connected_address):
		return

	# Check minimum valid message size
	if(packet.size() < 14):
		return
	
	var config = packet[10];
	var new_integrity = float(packet[11]) / 255.0
	var new_temperature = float(packet[12]) / 255.0
	var new_event_trigger = packet[13]
	
	# Read optional status data
	if(packet.size() >= 15):
		status_flags = packet[14]
	else:
		status_flags = 0
	
	# Detect player ship destruction
	if(integrity > 0.0 and new_integrity == 0.0):
		handle_event(EVENT_DESTRUCTION)
	elif(integrity == 0.0 and new_integrity == 1.0):
		handle_event(EVENT_RESPAWN)
	integrity = new_integrity
	temperature = new_temperature
	
	# Handle event triggers
	if(new_event_trigger != event_trigger):
		if(event_trigger >= 0):
			handle_event(new_event_trigger & 0x0F)
		event_trigger = new_event_trigger
	
	# Update status bars
	get_node(\"IntegrityBar\").set_value(integrity)
	get_node(\"TemperatureBar\").set_value(temperature)
	
	# Check that server configuration is up to date
	if(config != config_sequence_number && configure_timer.get_time_left() <= 0.0):
		# Send new configure message
		send_configure_message()
		# Set inhibit timer to prevent spamming configuration messages
		configure_timer.start()
	
	# Reset connection timeout timer
	connection_timer.start()
	
	# Mark connection active once we have received a status messsage from server
	connection_active = true;


func handle_event(event):
	if(event == EVENT_DAMAGE):
		if(flash_intensity < 1.0):
			flash_intensity = 1.0
	elif(event == EVENT_RESPAWN):
		if(config.get_value(\"settings\", \"sound_effects\", true)):
			get_node(\"RespawnSound\").play(0)
	elif(event == EVENT_DESTRUCTION):
		if(flash_intensity < 5.0):
			flash_intensity = 5.0


"

[sub_resource type="ButtonGroup" id=2]
resource_name = "ControllerTypeButtonGroup"

[sub_resource type="CanvasItemMaterial" id=3]
blend_mode = 2

[sub_resource type="CanvasItemMaterial" id=4]
blend_mode = 1

[node name="Panel" type="Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 1.0
margin_top = 1.0
margin_right = 1.0
margin_bottom = 1.0
theme = ExtResource( 1 )
script = SubResource( 1 )

[node name="StatusLabel" type="Label" parent="."]
anchor_right = 1.0
margin_left = 247.0
margin_top = 23.0
margin_right = -305.0
margin_bottom = 63.0
mouse_filter = 0
size_flags_vertical = 1
text = "Unconnected"
valign = 1

[node name="RespawnHintLabel" type="Label" parent="."]
margin_top = 151.0
margin_right = 1019.0
margin_bottom = 181.0
text = "Hold shoot button to respawn"
align = 1

[node name="ConnectButton" type="Button" parent="."]
margin_left = 743.0
margin_top = 23.0
margin_right = 933.0
margin_bottom = 63.0
text = "Connect"

[node name="SettingsButton" type="Button" parent="."]
margin_left = 23.0
margin_top = 23.0
margin_right = 223.0
margin_bottom = 63.0
text = "Settings"

[node name="SettingsPopup" type="PopupDialog" parent="."]
visible = true
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 79.0
margin_top = 119.0
margin_right = -81.0
margin_bottom = -81.0
popup_exclusive = true

[node name="GridContainer" type="GridContainer" parent="SettingsPopup"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = 20.0
margin_right = -20.0
margin_bottom = -20.0
mouse_filter = 0
custom_constants/vseparation = 24
custom_constants/hseparation = 100
columns = 2

[node name="PlayerNameLabel" type="Label" parent="SettingsPopup/GridContainer"]
margin_right = 266.0
margin_bottom = 30.0
mouse_filter = 1
size_flags_vertical = 0
custom_fonts/font = ExtResource( 2 )
text = "Player name:"

[node name="PlayerNameLineEdit" type="LineEdit" parent="SettingsPopup/GridContainer"]
margin_left = 366.0
margin_right = 824.0
margin_bottom = 40.0
rect_min_size = Vector2( 400, 40 )
size_flags_horizontal = 3
custom_fonts/font = ExtResource( 2 )
max_length = 20
caret_blink = true

[node name="PlayerColorLabel" type="Label" parent="SettingsPopup/GridContainer"]
margin_top = 64.0
margin_right = 266.0
margin_bottom = 94.0
mouse_filter = 1
size_flags_vertical = 0
custom_fonts/font = ExtResource( 2 )
text = "Player color:"

[node name="PlayerColorScrollBar" type="HScrollBar" parent="SettingsPopup/GridContainer"]
margin_left = 366.0
margin_top = 64.0
margin_right = 824.0
margin_bottom = 104.0
rect_min_size = Vector2( 400, 40 )
size_flags_horizontal = 3
size_flags_vertical = 1
max_value = 255.0
step = 16.0
page = 32.0

[node name="ControllerTypeLabel" type="Label" parent="SettingsPopup/GridContainer"]
margin_top = 128.0
margin_right = 266.0
margin_bottom = 158.0
mouse_filter = 1
size_flags_vertical = 0
custom_fonts/font = ExtResource( 2 )
text = "Controller type:"

[node name="ControllerTypeContainer" type="HBoxContainer" parent="SettingsPopup/GridContainer"]
margin_left = 366.0
margin_top = 128.0
margin_right = 824.0
margin_bottom = 164.0

[node name="ControllerTypeButton1" type="Button" parent="SettingsPopup/GridContainer/ControllerTypeContainer"]
margin_right = 227.0
margin_bottom = 36.0
size_flags_horizontal = 3
toggle_mode = true
group = SubResource( 2 )
text = "Buttons"

[node name="ControllerTypeButton2" type="Button" parent="SettingsPopup/GridContainer/ControllerTypeContainer"]
margin_left = 231.0
margin_right = 458.0
margin_bottom = 36.0
size_flags_horizontal = 3
toggle_mode = true
group = SubResource( 2 )
text = "Joystick"

[node name="SensitivityLabel" type="Label" parent="SettingsPopup/GridContainer"]
margin_top = 188.0
margin_right = 266.0
margin_bottom = 218.0
mouse_filter = 1
size_flags_vertical = 0
text = "Joystick sensitivity:"

[node name="SensitivityScrollBar" type="HScrollBar" parent="SettingsPopup/GridContainer"]
margin_left = 366.0
margin_top = 188.0
margin_right = 824.0
margin_bottom = 228.0
rect_min_size = Vector2( 400, 40 )
size_flags_horizontal = 3
size_flags_vertical = 1
max_value = 1.0
step = 0.1
page = 0.125

[node name="SoundEffectsLabel" type="Label" parent="SettingsPopup/GridContainer"]
margin_top = 257.0
margin_right = 266.0
margin_bottom = 287.0
text = "Sound effects:"

[node name="SoundEffectsButton" type="Button" parent="SettingsPopup/GridContainer"]
margin_left = 366.0
margin_top = 252.0
margin_right = 824.0
margin_bottom = 292.0
rect_min_size = Vector2( 400, 40 )
toggle_mode = true
text = "On"

[node name="OKButton" type="Button" parent="SettingsPopup"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -210.0
margin_top = -60.0
margin_right = -20.0
margin_bottom = -20.0
custom_fonts/font = ExtResource( 2 )
text = "OK"

[node name="ConnectPopup" type="PopupDialog" parent="."]
editor/display_folded = true
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 79.0
margin_top = 119.0
margin_right = -81.0
margin_bottom = -81.0
popup_exclusive = true

[node name="GameList" type="ItemList" parent="ConnectPopup"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = 20.0
margin_right = -20.0
margin_bottom = -80.0
custom_constants/vseparation = 16
custom_constants/line_separation = 0

[node name="ConnectButton" type="Button" parent="ConnectPopup"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -210.0
margin_top = -60.0
margin_right = -20.0
margin_bottom = -20.0
custom_fonts/font = ExtResource( 2 )
text = "Connect"

[node name="CancelButton" type="Button" parent="ConnectPopup"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -420.0
margin_top = -60.0
margin_right = -230.0
margin_bottom = -20.0
custom_fonts/font = ExtResource( 2 )
text = "Cancel"

[node name="StatusLabel" type="Label" parent="ConnectPopup"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = -60.0
margin_right = 426.0
margin_bottom = -20.0
mouse_filter = 1
size_flags_vertical = 0
custom_fonts/font = ExtResource( 2 )
valign = 1

[node name="IntegrityBar" parent="." instance=ExtResource( 3 )]
margin_left = 79.0
margin_top = 79.0
margin_right = 479.0
margin_bottom = 111.0

[node name="TemperatureBar" parent="." instance=ExtResource( 3 )]
margin_left = 543.0
margin_top = 79.0
margin_right = 943.0
margin_bottom = 111.0

[node name="IntegrityIcon" type="Sprite" parent="."]
position = Vector2( 47, 95 )
scale = Vector2( 0.25, 0.25 )
texture = ExtResource( 4 )

[node name="TemperatureIcon" type="Sprite" parent="."]
position = Vector2( 975.75, 95 )
scale = Vector2( 0.25, 0.25 )
texture = ExtResource( 5 )

[node name="AboutPopup" type="PopupDialog" parent="."]
editor/display_folded = true
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 79.0
margin_top = 119.0
margin_right = -81.0
margin_bottom = -81.0
popup_exclusive = true

[node name="OKButton" type="Button" parent="AboutPopup"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -210.0
margin_top = -60.0
margin_right = -20.0
margin_bottom = -20.0
custom_fonts/font = ExtResource( 2 )
text = "OK"

[node name="LogoTextureFrame" type="TextureRect" parent="AboutPopup"]
anchor_right = 1.0
margin_left = 20.0
margin_top = 20.0
margin_right = 1204.0
margin_bottom = 320.0
rect_scale = Vector2( 0.4, 0.4 )
texture = ExtResource( 6 )
stretch_mode = 4

[node name="RichTextLabel" type="RichTextLabel" parent="AboutPopup"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = 160.0
margin_right = -20.0
margin_bottom = -80.0
bbcode_text = "Mobile controller application for Hyper Ultra Astronautics - A local multiplayer space arena shoot'em up on PC.

Copyright 2019 FRACTiLE Games
http://www.fractilegames.com

Made with Godot engine (https://godotengine.org).

Application font by Matt McInerney (http://pixelspread.com)."
text = "Mobile controller application for Hyper Ultra Astronautics - A local multiplayer space arena shoot'em up on PC.

Copyright 2019 FRACTiLE Games
http://www.fractilegames.com

Made with Godot engine (https://godotengine.org).

Application font by Matt McInerney (http://pixelspread.com)."

[node name="LinkButton" type="Button" parent="AboutPopup"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = -60.0
margin_right = 210.0
margin_bottom = -20.0
text = "Website"

[node name="AboutButton" type="Button" parent="."]
margin_left = 959.0
margin_top = 23.0
margin_right = 999.0
margin_bottom = 63.0
text = "?"

[node name="PrivacyPopup" type="PopupDialog" parent="."]
editor/display_folded = true
margin_left = 79.0
margin_top = 119.0
margin_right = 943.0
margin_bottom = 519.0
popup_exclusive = true

[node name="RichTextLabel" type="RichTextLabel" parent="PrivacyPopup"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = 20.0
margin_right = -20.0
margin_bottom = -80.0
bbcode_text = "PRIVACY POLICY

This application does not collect or process any personal data other than device network address which is needed to connect to the game.

The player settings you have entered will be transmitted unencrypted in the current Wi-Fi network and will be accessed by game servers running in same subnetwork."
text = "PRIVACY POLICY

This application does not collect or process any personal data other than device network address which is needed to connect to the game.

The player settings you have entered will be transmitted unencrypted in the current Wi-Fi network and will be accessed by game servers running in same subnetwork."

[node name="AcceptButton" type="Button" parent="PrivacyPopup"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -210.0
margin_top = -60.0
margin_right = -20.0
margin_bottom = -20.0
custom_fonts/font = ExtResource( 2 )
text = "Accept"

[node name="RejectButton" type="Button" parent="PrivacyPopup"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -420.0
margin_top = -60.0
margin_right = -230.0
margin_bottom = -20.0
text = "Reject"

[node name="ManualConnectPopup" type="PopupDialog" parent="."]
editor/display_folded = true
margin_left = 79.0
margin_top = 119.0
margin_right = 943.0
margin_bottom = 519.0

[node name="AddressLabel" type="Label" parent="ManualConnectPopup"]
margin_left = 20.0
margin_top = 20.0
margin_right = 340.0
margin_bottom = 60.0
mouse_filter = 1
size_flags_vertical = 0
text = "Game host address:"
valign = 1

[node name="AddressLineEdit" type="LineEdit" parent="ManualConnectPopup"]
anchor_right = 1.0
margin_left = 400.0
margin_top = 20.0
margin_right = -20.0
margin_bottom = 60.0
max_length = 16
caret_blink = true

[node name="InstructionLabel" type="RichTextLabel" parent="ManualConnectPopup"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = 80.0
margin_right = -20.0
margin_bottom = -80.0
bbcode_text = "Enter the local IP address of the PC running Hyper Ultra Astronautics above.

You can see the address at the top of the screen when a new match is started on the PC. Note: Both the PC and mobile devices must be connected directly to the same sub-network (e.g. Wi-Fi access point)."
text = "Enter the local IP address of the PC running Hyper Ultra Astronautics above.

You can see the address at the top of the screen when a new match is started on the PC. Note: Both the PC and mobile devices must be connected directly to the same sub-network (e.g. Wi-Fi access point)."

[node name="ConnectButton" type="Button" parent="ManualConnectPopup"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -210.0
margin_top = -60.0
margin_right = -20.0
margin_bottom = -20.0
text = "Connect"

[node name="CancelButton" type="Button" parent="ManualConnectPopup"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -420.0
margin_top = -60.0
margin_right = -230.0
margin_bottom = -20.0
text = "Cancel"

[node name="StatusLabel" type="Label" parent="ManualConnectPopup"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = -60.0
margin_right = 420.0
margin_bottom = -20.0
mouse_filter = 1
size_flags_vertical = 0
valign = 1

[node name="TargetedSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 7 )
volume_db = -12.0

[node name="RespawnSound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 8 )
volume_db = -12.0

[node name="DisruptionOverlay" type="Sprite" parent="."]
visible = false
material = SubResource( 3 )
position = Vector2( 512, 300 )
scale = Vector2( 16, 1 )
z_index = 100
texture = ExtResource( 9 )
region_enabled = true
region_rect = Rect2( 0, 100, 64, 600 )

[node name="DamageOverlay" type="Sprite" parent="."]
visible = false
material = SubResource( 4 )
position = Vector2( 512, 300 )
z_index = 100
texture = ExtResource( 10 )
